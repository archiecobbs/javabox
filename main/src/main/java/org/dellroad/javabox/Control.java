
/*
 * Copyright (C) 2025 Archie L. Cobbs. All rights reserved.
 */

package org.dellroad.javabox;

/**
 * Monitors, modifies, and/or restricts the execution of scripts running in a {@link JavaBox}.
 *
 * <p>
 * Script controls are allowed to modify a script's generated bytecode, for example, to prevent
 * linking to certain classes, weave in periodic checsks, etc.
 *
 * <p>
 * Controls may create per-container and per-execution contexts. The lifecycle methods
 * {@link #initialize initialize()} and {@link #shutdown shutdown()} are for per-container context,
 * and {@link #startExecution startExecution()} and {@link #finishExecution finishExecution()} are
 * for per-execution context. An "execution" happens with script snippets that contain statements or
 * expressions; snippets that simply declare classes, etc., do not (immediately) execute.
 *
 * <p>
 * Note that if the return value from a script execution is an invokable object, then any subsequent
 * invocations into that object's methods it will not have any per-execution context, since they will
 * executing outside of the container. Of course, a control can always use other tricks to add such
 * context, e.g., bytecode modification, automatically wrapping return values in a proxy interface, etc.
 */
public interface Control {

    /**
     * Initialize this control for the given {@link JavaBox} and return any associated private context.
     *
     * <p>
     * Controls may create their own private context on a per-{@link JavaBox} basis using this method.
     * If no private context is needed, this method may return null.
     *
     * <p>
     * This method should also perform any other required per-container initialization, for example,
     * loading custom support classes.
     *
     * <p>
     * When the given {@link JavaBox} is closed, {@link #shutdown shutdown()} will be invoked
     * with a {@link ContainerContext} referencing the returned context object.
     *
     * <p>
     * The default implementation in {@link Control} returns null.
     *
     * @param box the {@link JavaBox} instance
     * @return this control's private context for the given {@link JavaBox}, or null if none is needed
     * @throws JavaBoxException if some error occurs
     */
    default Object initialize(JavaBox box) {
        return null;
    }

    /**
     * Shutdown this control for the given {@link JavaBox}.
     *
     * <p>
     * The default implementation in {@link Control} does nothing.
     *
     * @param context the container context for this control
     */
    default void shutdown(ContainerContext context) {
    }

    /**
     * Apply this control to the given class which was generated from a script.
     *
     * <p>
     * The default implementation in {@link Control} returns null.
     *
     * @param className the name of the class being added
     * @param classBytecode the Java bytecode of the class being added
     * @return replacement java bytecode, or null to make no modifications
     * @throws ControlViolationException if the class contains something rejected by this control
     * @throws JavaBoxException if some other error occurs
     */
    default byte[] modifyBytecode(String className, byte[] classBytecode) {
        return null;
    }

    /**
     * Notification that the execution of a script snippet has started.
     *
     * <p>
     * This method should initialize this control for the new execution and return any
     * associated private context.
     *
     * <p>
     * This method should also perform any required per-execution initialization, for example,
     * initializing resource counters, etc.
     *
     * <p>
     * The current thread will be the thread that is actually executing the script snippet.
     * A {@link ExecutionContext} will be created using the returned private context and made
     * available in this thread via {@link JavaBox#executionContextFor JavaBox.executionContextFor()},
     * and also provided to {@link #finishExecution finishExecution()}.
     *
     * <p>
     * The default implementation in {@link Control} returns null.
     *
     * @param context the container context for this control
     */
    default Object startExecution(ContainerContext context) {
        return null;
    }

    /**
     * Notification that the execution of a script snippet has finished, either successfully or
     * by throwing an exception.
     *
     * <p>
     * The current thread will be the thread that actually executed the snippet.
     *
     * <p>
     * The default implementation in {@link Control} does nothing.
     *
     * @param context the execution context for this control
     * @param result the return value from the successful execution of an expression snippet, otherwise null
     * @param error the exception thrown by snippet execution if there was an error, otherwise null
     */
    default void finishExecution(ExecutionContext context, Object result, Throwable error) {
    }

// ContainerContext

    /**
     * The per-{@link JavaBox} context associated with a {@link Control}.
     *
     * <p>
     * This context is valid as long as the associated {@link JavaBox} is not closed.
     *
     * @param box The associated {@link JavaBox}
     * @param control The associated {@link Control}
     * @param context The {@link Control}'s per-container private state
     */
    record ContainerContext(JavaBox box, Control control, Object context) { }

// ExecutionContext

    /**
     * The per-execution context associated with a {@link Control}.
     *
     * <p>
     * This context is valid as long as the associated script execution has not finished.
     *
     * @param containerContext The associated {@link ContainerContext}
     * @param context The {@link Control}'s per-execution private state
     */
    record ExecutionContext(ContainerContext containerContext, Object context) { }
}
