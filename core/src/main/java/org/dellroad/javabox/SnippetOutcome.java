
/*
 * Copyright (C) 2025 Archie L. Cobbs. All rights reserved.
 */

package org.dellroad.javabox;

import java.util.List;

import jdk.jshell.Snippet;

/**
 * Captures the outcome from one of the {@link Snippet}s that constitute a {@link JavaBox} script.
 *
 * <p>
 * A snippet can fail by failing to compile, compiling into bytecode that violates a {@link Control},
 * throwing an exception during execution, etc.
 *
 * <p>
 * For some outcomes that implement {@link SnippetOutcome.HasSnippet}, additional information is available
 * via the {@linkplain SnippetOutcome.HasSnippet#snippet associated JShell snippet}.
 */
public sealed interface SnippetOutcome
  permits SnippetOutcomes.AbstractSnippetOutcome, SnippetOutcome.CompilerErrors, SnippetOutcome.ControlViolation,
    SnippetOutcome.UnresolvedReferences, SnippetOutcome.Overwritten, SnippetOutcome.ExceptionThrown, SnippetOutcome.Successful {

    /**
     * Get the associated {@link JavaBox}.
     *
     * @return associated container
     */
    JavaBox box();

    /**
     * Get the source code of the snippet whose outcome is represented by this instance.
     *
     * <p>
     * This will equal the substring of the original script source starting at {@link #offset}.
     *
     * @return snippet source
     * @see #offset
     */
    String source();

    /**
     * Get the position within the original script source of the {@link #source} associated with this instance.
     *
     * @return snippet source offset in original script
     * @see #source
     */
    LineAndColumn offset();

// Ordinary interfaces

    /**
     * Implemented by {@link SnippetOutcome}s for which enough progress was made to define a JShell {@link Snippet}.
     */
    interface HasSnippet {

        /**
         * Get the associated snippet.
         *
         * @return JShell snippet
         */
        Snippet snippet();
    }

    /**
     * Implemented by {@link SnippetOutcome}s for which there is an associated exception.
     *
     * @param <T> exception type
     */
    interface HasException<T extends Throwable> {

        /**
         * Get the exception thrown.
         *
         * @return exception thrown
         */
        T exception();
    }

    /**
     * Implemented by {@link SnippetOutcome}s that will cause a script to stop executing.
     */
    interface HaltsScript {
    }

// SnippetOutcome permitted interfaces

    /**
     * Indicates failure due to one or more compiler errors.
     */
    sealed interface CompilerErrors extends SnippetOutcome, HaltsScript
      permits SnippetOutcomes.AbstractCompilerErrors, SnippetOutcome.CompilerSyntaxErrors, SnippetOutcome.CompilerSemanticErrors {

        /**
         * Get the compiler errors that caused compilation to fail.
         *
         * @return compilation errors
         */
        List<CompilerError> compilerErrors();
    }

    /**
     * Indicates failure due to one or more compiler parsing/syntax errors.
     */
    sealed interface CompilerSyntaxErrors extends CompilerErrors
      permits SnippetOutcomes.CompilerSyntaxErrors {
    }

    /**
     * Indicates failure due to one or more compiler semantic errors.
     */
    sealed interface CompilerSemanticErrors extends CompilerErrors, HasSnippet
      permits SnippetOutcomes.CompilerSemanticErrors {
    }

    /**
     * Indicates that the bytecode generated by the snippet could not be loaded because it violated some {@link Control}.
     *
     * <p>
     * If this error happens, the snippet was never executed. Controls can also trigger exceptions during
     * snippet execution; this results in an {@link ExceptionThrown} instead.
     */
    sealed interface ControlViolation extends SnippetOutcome, HaltsScript, HasException<ControlViolationException>
      permits SnippetOutcomes.ControlViolation {
    }

    /**
     * Indicates that a declaration was successful but it contained unresolved references and those
     * references were not resolved by any subsequent snippets in the same source.
     *
     * <p>
     * Note: When a declaration contains unresolved references that are all subsequently resolved
     * later in the same script, it returns {@link SuccessfulNoValue}.
     */
    sealed interface UnresolvedReferences extends SnippetOutcome, HasSnippet
      permits SnippetOutcomes.UnresolvedReferences {
    }

    /**
     * Indicates that a declaration was successfully compiled, but the declaration was overwritten by
     * a later snippet in the same source.
     **/
    sealed interface Overwritten extends SnippetOutcome, HasSnippet
      permits SnippetOutcomes.Overwritten {
    }

    /**
     * Indicates an exception was thrown during the execution of the snippet.
     */
    sealed interface ExceptionThrown extends SnippetOutcome, HasSnippet, HaltsScript, HasException<Throwable>
      permits SnippetOutcomes.ExceptionThrown {
    }

    /**
     * Indicates a successful outcome.
     */
    sealed interface Successful extends SnippetOutcome, HasSnippet
      permits SnippetOutcomes.AbstractSuccessful, SnippetOutcome.SuccessfulNoValue, SnippetOutcome.SuccessfulWithValue {
    }

    /**
     * Indicates a successful outcome for which no value was returned, e.g., the invocation of a void method,
     * the declaration for which no unresolved references remain, etc.
     */
    sealed interface SuccessfulNoValue extends Successful permits SnippetOutcomes.SuccessfulNoValue {
    }

    /**
     * Indicates a successful outcome for which some value was returned, e.g., an evaluated expression
     * or the invocation of a non-void method.
     */
    sealed interface SuccessfulWithValue extends Successful permits SnippetOutcomes.SuccessfulWithValue {

        /**
         * Get the value returned from the snippet's execution.
         *
         * @return snippet return value
         */
        Object returnValue();
    }
}
