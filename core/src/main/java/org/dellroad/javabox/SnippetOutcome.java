
/*
 * Copyright (C) 2025 Archie L. Cobbs. All rights reserved.
 */

package org.dellroad.javabox;

import java.util.List;

import jdk.jshell.Diag;
import jdk.jshell.Snippet;
import jdk.jshell.SourceCodeAnalysis;

/**
 * Captures the outcome from one of the {@link Snippet}s that constitute a {@link JavaBox} script.
 *
 * <p>
 * A snippet can fail by failing to compile, compiling into bytecode that violates a {@link Control},
 * throwing an exception during execution, etc.
 */
public sealed interface SnippetOutcome
  permits SnippetOutcomes.AbstractSnippetOutcome, SnippetOutcome.CompilerError, SnippetOutcome.ControlViolation,
    SnippetOutcome.UnresolvedReferences, SnippetOutcome.Overwritten, SnippetOutcome.Suspended, SnippetOutcome.Interrupted,
    SnippetOutcome.Skipped, SnippetOutcome.ExceptionThrown, SnippetOutcome.Successful {

    /**
     * Get the associated {@link JavaBox}.
     *
     * @return associated container
     */
    JavaBox box();

    /**
     * Get the character offset within the original script source of the source for the associated snippet.
     *
     * <p>
     * The source for the associated snippet can be obtained via {@link #snippet}{@code .source()}.
     *
     * @return snippet source offset in original script
     * @see ScriptResult#source
     */
    int offset();

    /**
     * Get the associated snippet.
     *
     * <p>
     * Note: In some cases, the {@code snippet} may be <i>unassociated</i> (as described by
     * {@link SourceCodeAnalysis#sourceToSnippets SourceCodeAnalysis.sourceToSnippets()}). This will be the
     * case if the snippet source code was correct enough to be parsed, but the snippet didn't get far enough
     * to actually be executed.
     *
     * <p>
     * The source for the associated snippet can be obtained via {@link #snippet}{@code .source()}.
     *
     * @return JShell snippet
     */
    Snippet snippet();

    /**
     * Get the source code of the associated snippet.
     *
     * <p>
     * The implementation in {@link SnippetOutcome} just returns {@link #snippet}{@code .source()}.
     *
     * @return snippet source
     */
    default String source() {
        return snippet().source();
    }

    /**
     * Get diagnostics associated with the evaluation of the snippet.
     *
     * <p>
     * The positions of the diagnostics will be relative to the start of this snippet. To map these positions
     * back to the original script source, add {@link #offset}.
     *
     * @return snippet diagnostics
     */
    List<Diag> diagnostics();

// Ordinary interfaces

    /**
     * Implemented by {@link SnippetOutcome}s for which there is an associated exception.
     *
     * @param <T> exception type
     */
    interface HasException<T extends Throwable> {

        /**
         * Get the exception thrown.
         *
         * @return exception thrown
         */
        T exception();
    }

    /**
     * Implemented by {@link SnippetOutcome}s that will cause a script to stop executing.
     */
    interface HaltsScript {
    }

// SnippetOutcome permitted interfaces

    /**
     * Indicates failure due to one or more compiler errors.
     */
    sealed interface CompilerError extends SnippetOutcome, HaltsScript
      permits SnippetOutcomes.CompilerError {
    }

    /**
     * Indicates that the bytecode generated by the snippet could not be loaded because it violated some {@link Control}.
     *
     * <p>
     * If this error happens, the snippet was never executed. Controls can also trigger exceptions during
     * snippet execution; that results in an {@link ExceptionThrown} instead.
     */
    sealed interface ControlViolation extends SnippetOutcome, HaltsScript, HasException<ControlViolationException>
      permits SnippetOutcomes.ControlViolation {
    }

    /**
     * Indicates that a declaration was successful but it contained unresolved references and those
     * references were not resolved by any subsequent snippets in the same source.
     *
     * <p>
     * Note: When a declaration contains unresolved references that are all subsequently resolved
     * later in the same script, it returns {@link SuccessfulNoValue}.
     */
    sealed interface UnresolvedReferences extends SnippetOutcome permits SnippetOutcomes.UnresolvedReferences {
    }

    /**
     * Indicates that a declaration was successfully compiled, but the declaration was overwritten by
     * a later snippet in the same source.
     **/
    sealed interface Overwritten extends SnippetOutcome permits SnippetOutcomes.Overwritten {
    }

    /**
     * Indicates that the snippet invoked {@link JavaBox#suspend JavaBox.suspend()}.
     *
     * <p>
     * The script will be suspended mid-execution. To restart its execution, invoke {@link JavaBox#resume resume()}
     * with the value you want to be returned to the script from {@link JavaBox#suspend suspend()}.
     *
     * <p>
     * Because the snippet execution has not yet completed, the associated {@link #snippet} will be <i>unassociated</i>
     * (as described by {@link SourceCodeAnalysis#sourceToSnippets SourceCodeAnalysis.sourceToSnippets()}).
     *
     * <p>
     * After a snippet is resumed, a new outcome will have replaced the {@link Suspended} outcome
     * in the next {@link ScriptResult} returned by {@link JavaBox#resume resume()}.
     */
    sealed interface Suspended extends SnippetOutcome, HaltsScript permits SnippetOutcomes.Suspended {

        /**
         * Get the parameter that was passed to {@link JavaBox#suspend JavaBox.suspend()}.
         *
         * @return suspend parameter
         */
        Object parameter();
    }

    /**
     * Indicates that the snippet's execution was interrupted.
     *
     * <p>
     * A script can be interrupted by interrupting the thread that is executing it,
     * or by invoking {@link JavaBox#interrupt interrupt()} from a different thread.
     */
    sealed interface Interrupted extends SnippetOutcome, HaltsScript permits SnippetOutcomes.Interrupted {
    }

    /**
     * Indicates that the snippet's was not executed (yet).
     */
    sealed interface Skipped extends SnippetOutcome permits SnippetOutcomes.Skipped {
    }

    /**
     * Indicates an exception was thrown during the execution of the snippet.
     */
    sealed interface ExceptionThrown extends SnippetOutcome, HaltsScript, HasException<Throwable>
      permits SnippetOutcomes.ExceptionThrown {
    }

    /**
     * Indicates a successful outcome.
     */
    sealed interface Successful extends SnippetOutcome
      permits SnippetOutcomes.AbstractSuccessful, SnippetOutcome.SuccessfulNoValue, SnippetOutcome.SuccessfulWithValue {
    }

    /**
     * Indicates a successful outcome for which no value was returned, e.g., the invocation of a void method,
     * a declaration for which no unresolved references remain, etc.
     */
    sealed interface SuccessfulNoValue extends Successful permits SnippetOutcomes.SuccessfulNoValue {
    }

    /**
     * Indicates a successful outcome for which some value was returned, e.g., an evaluated expression
     * or the invocation of a non-void method.
     */
    sealed interface SuccessfulWithValue extends Successful permits SnippetOutcomes.SuccessfulWithValue {

        /**
         * Get the value returned from the snippet's execution.
         *
         * @return snippet return value
         */
        Object returnValue();
    }
}
